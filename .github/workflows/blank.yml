# ğŸ“Œ Nom du workflow GitHub Actions
name: Automate Sub-Issues Management

# ğŸ“Œ DÃ©finition des dÃ©clencheurs du workflow (Ã©vÃ©nements qui le lancent)
on:
  # ğŸ”¹ DÃ©clenchÃ© lorsquâ€™une issue est ouverte, modifiÃ©e ou labÃ©lisÃ©e
  issues:
    types: [opened, edited, labeled, assigned, commented, milestoned, review_requested, synchronized, closed]

  # ğŸ”¹ DÃ©clenchÃ© lorsquâ€™un commentaire est ajoutÃ© Ã  une sub-issue (indique une activitÃ© en cours)
  issue_comment:
    types: [created]

  # ğŸ”¹ DÃ©clenchÃ© lorsquâ€™une Pull Request est crÃ©Ã©e, fusionnÃ©e ou fermÃ©e
  pull_request:
    types: [opened, closed, merged]

# ğŸ“Œ DÃ©finition des jobs (tÃ¢ches) du workflow
jobs:
  # ğŸ”¹ Job 1 : DÃ©placer une sub-issue en "In Progress" et son issue parent si nÃ©cessaire
  move-sub-issue-to-in-progress:
    runs-on: ubuntu-latest  # ExÃ©cution sur une machine virtuelle Linux

    # VÃ©rifie si lâ€™action est liÃ©e Ã  une sub-issue passant de "No Status" Ã  "In Progress"
    if: github.event.issue.labels.name == 'No Status' || github.event_name == 'issue_comment'

    steps:
      - uses: actions/checkout@v4  # RÃ©cupÃ¨re le code source du dÃ©pÃ´t

      # ğŸ”¹ Ã‰tape 2 : Mettre Ã  jour l'Ã©tat de la sub-issue en "In Progress"
      - name: Move sub-issue to "In Progress"
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;

            // Ajoute le label "In Progress" Ã  lâ€™issue actuelle
            await github.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ["In Progress"]
            });

            // ğŸ”¹ RÃ©cupÃ©rer l'issue parent liÃ©e Ã  cette sub-issue
            const issueBody = issue.body;
            const parentIssueMatch = issueBody.match(/Parent Issue: #(\d+)/);
            if (parentIssueMatch) {
              const parentIssueNumber = parentIssueMatch[1];

              // ğŸ”¹ VÃ©rifie si lâ€™issue parent est dÃ©jÃ  en "In Progress"
              const parentIssueData = await github.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentIssueNumber
              });

              const parentLabels = parentIssueData.data.labels.map(label => label.name);
              if (!parentLabels.includes("In Progress")) {
                // ğŸ”¹ Ajoute "In Progress" Ã  lâ€™issue parent seulement si nÃ©cessaire
                await github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parentIssueNumber,
                  labels: ["In Progress"]
                });
              }
            }

  # ğŸ”¹ Job 2 : VÃ©rifier si toutes les sub-issues sont fermÃ©es et fermer lâ€™issue parent si nÃ©cessaire
  close-parent-when-sub-issues-done:
    runs-on: ubuntu-latest  # ExÃ©cution sur une machine virtuelle Linux

    # VÃ©rifie si une issue est fermÃ©e
    if: github.event.issue.state == 'closed'

    steps:
      - uses: actions/checkout@v4  # RÃ©cupÃ¨re le code source du dÃ©pÃ´t

      # ğŸ”¹ Ã‰tape 2 : VÃ©rifie que toutes les sub-issues sont bien fermÃ©es avant de fermer le parent
      - name: Check if all sub-issues are done
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body;

            // ğŸ”¹ Trouve toutes les sub-issues liÃ©es Ã  cette issue parent
            const subIssues = issueBody.match(/#(\d+)/g);
            if (subIssues) {
              let allClosed = true;  # Suppose que toutes les sub-issues sont fermÃ©es

              for (const subIssue of subIssues) {
                const issueNumber = subIssue.replace("#", "");

                // ğŸ”¹ VÃ©rifie lâ€™Ã©tat de chaque sub-issue
                const subIssueData = await github.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                if (subIssueData.data.state !== "closed") {
                  allClosed = false;  # Si une sub-issue est encore ouverte, on arrÃªte la fermeture
                  break;
                }
              }

              // ğŸ”¹ Si toutes les sub-issues sont fermÃ©es, on ferme aussi lâ€™issue parent
              if (allClosed) {
                await github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: "closed",
                  labels: ["Done"]  # DÃ©placement de lâ€™issue parent en "Done"
                });
              }
            }
