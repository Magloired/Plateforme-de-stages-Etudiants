# ğŸ“Œ Nom du workflow GitHub Actions
name: Automate Sub-Issues Management

# ğŸ“Œ DÃ©finition des dÃ©clencheurs du workflow (Ã©vÃ©nements qui le lancent)
on:
  # ğŸ”¹ DÃ©clenchÃ© lorsqu'une tÃ¢che parent est assignÃ©e, modifiÃ©e ou fermÃ©e
  issues:
    types: [assigned, edited, closed]

  # ğŸ”¹ DÃ©clenchÃ© lorsqu'une sub-issue reÃ§oit un commentaire (signifiant qu'elle est en cours de traitement)
  issue_comment:
    types: [created]

# ğŸ“Œ DÃ©finition des jobs (tÃ¢ches) du workflow
jobs:
  # ğŸ”¹ Job 1 : DÃ©placer les sub-issues en "To Do" lorsqu'une tÃ¢che parent est assignÃ©e
  move-sub-issues-to-todo:
    runs-on: ubuntu-latest  # ExÃ©cution sur une machine virtuelle Linux

    # VÃ©rifie si l'action est bien une assignation
    if: github.event.action == 'assigned'

    steps:
      - uses: actions/checkout@v4  # RÃ©cupÃ¨re le code source du dÃ©pÃ´t

      # ğŸ”¹ Ã‰tape 2 : RÃ©cupÃ©rer les sub-issues et les dÃ©placer en "To Do"
      - name: Move sub-issues to "To Do"
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body;

            // Trouve toutes les sub-issues liÃ©es Ã  l'issue parent (ex: #10, #11)
            const subIssues = issueBody.match(/#(\d+)/g);

            if (subIssues) {
              for (const subIssue of subIssues) {
                const issueNumber = subIssue.replace("#", "");

                // DÃ©place chaque sub-issue vers la colonne "To Do"
                await github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  state: "open",  # S'assure que l'issue est ouverte
                  labels: ["To Do"]  # Ajoute le label "To Do" pour la colonne
                });
              }
            }

  # ğŸ”¹ Job 2 : DÃ©placer une sub-issue en "In Progress" lorsqu'elle est ouverte
  move-sub-issue-to-in-progress:
    runs-on: ubuntu-latest  # ExÃ©cution sur une machine virtuelle Linux

    # VÃ©rifie si un commentaire a Ã©tÃ© ajoutÃ© Ã  l'issue (cela signifie qu'elle est en cours de traitement)
    if: github.event_name == 'issue_comment'

    steps:
      - uses: actions/checkout@v4  # RÃ©cupÃ¨re le code source du dÃ©pÃ´t

      # ğŸ”¹ Ã‰tape 2 : Mettre Ã  jour l'Ã©tat de la sub-issue en "In Progress"
      - name: Move sub-issue to "In Progress"
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;

            // Ajoute le label "In Progress" Ã  l'issue actuelle
            await github.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ["In Progress"]
            });

  # ğŸ”¹ Job 3 : VÃ©rifier si toutes les sub-issues sont fermÃ©es et fermer le parent
  close-parent-when-sub-issues-done:
    runs-on: ubuntu-latest  # ExÃ©cution sur une machine virtuelle Linux

    # VÃ©rifie si une issue est fermÃ©e
    if: github.event.issue.state == 'closed'

    steps:
      - uses: actions/checkout@v4  # RÃ©cupÃ¨re le code source du dÃ©pÃ´t

      # ğŸ”¹ Ã‰tape 2 : VÃ©rifier que toutes les sub-issues sont fermÃ©es avant de fermer le parent
      - name: Check if all sub-issues are done
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body;

            // Trouve toutes les sub-issues liÃ©es Ã  cette issue parent
            const subIssues = issueBody.match(/#(\d+)/g);

            if (subIssues) {
              let allClosed = true;  // Suppose que toutes les sub-issues sont fermÃ©es

              for (const subIssue of subIssues) {
                const issueNumber = subIssue.replace("#", "");

                // VÃ©rifie l'Ã©tat de chaque sub-issue
                const subIssueData = await github.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                if (subIssueData.data.state !== "closed") {
                  allClosed = false;  # Si une sub-issue est encore ouverte, on arrÃªte la fermeture
                  break;
                }
              }

              // Si toutes les sub-issues sont fermÃ©es, on ferme aussi lâ€™issue parent
              if (allClosed) {
                await github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: "closed",
                  labels: ["Done"]  # DÃ©placement de lâ€™issue parent en "Done"
                });
              }
            }
